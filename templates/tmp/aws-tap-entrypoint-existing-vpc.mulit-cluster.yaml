AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation template
Mappings:
  SampleAppProperties:
    Namespace:
      Name: tap-workload
    OotbRepoPrefix:
      Name: tap-supply-chain
Parameters:
  SampleAppName:
    Type: String
    Description: >-
      Name of the sample application to deploy into your Amazon EKS cluster.
    AllowedValues:
      - tanzu-java-web-app-workload
    Default: tanzu-java-web-app-workload
  TAPDomainName:
   Type: String
   Description: >-
      Private DNS domain name for accessing the TAP graphical user interface
      (GUI) and project URLs.
   Default: ui-tanzu-east-1.com
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: >-
      ID of your existing VPC (example: vpc-0343606e).
    Default: vpc-01d766924c375f941
  LinuxBastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: >-
      LinuxBastionSecurityGroup
    Default: sg-04f896fcedaed6c77
  TAPClusterArch:
    Type: String
    Description: >-
      TAP Cluster Architecture
    AllowedValues:
      - 'Multi'
      - 'Single'
    Default: 'Multi'
  PublicSubnet1Id:
    Type: AWS::EC2::Subnet::Id
    Description: >-
      ID of the public subnet in Availability Zone 1 of your existing VPC
      (example: subnet-a0246dcd).
    Default: subnet-035494469cc076aab
  PrivateSubnet1Id:
    Type: AWS::EC2::Subnet::Id
    Description: >-
      ID of the private subnet in Availability Zone 1 of your existing VPC
      (example: subnet-fe9a8b32).
    Default: subnet-00cc7a8de362c6c72
  PrivateSubnet2Id:
    Type: AWS::EC2::Subnet::Id
    Description: >-
      ID of the private subnet in Availability Zone 2 of your existing VPC
      (example: subnet-be8b01ea).
    Default: subnet-0e3ee5ff3be98993f
  PrivateSubnet3Id:
    Type: String
    Description: >-
      ID of the private subnet in Availability Zone 3 of your existing VPC
      (example: subnet-abd39039).
    AllowedPattern: ^(subnet-([0-9a-f]{8}|[0-9a-f]{17})|)$
    ConstraintDescription: Must be a valid VPC subnet ID or blank.
    Default: subnet-05dadbf75aa8ac48f
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: >-
      The name of the EC2 key pair used for SSH access to the Linux bastion
      host / bootstrap instance and EKS cluster nodes, and for encrypting the
      Windows bastion host password. As of June 21, 2022, only RSA key types
      are supported due to Windows instances not supporting ED25519. For more
      information, refer to Amazon EC2 key pairs and Windows instances
      (https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-key-pairs.html).
    Default: satyakeypair-us-east1
  EKSClusterName:
    Type: String
    Description: Name of the EKS cluster where TAP will be deployed.
    MinLength: 1
    MaxLength: 100
    AllowedPattern: ^[0-9A-Za-z][A-Za-z0-9\-_]*
    ConstraintDescription: >-
      Minimum length of 1. Maximum length of 100. Must start with a letter or
      number.
    Default: tap
  KubernetesVersion:
    Type: String
    Description: >-
      Version of Kubernetes control plane to deploy. The selected version must
      be supported the selected TAP version (TAPVersion). For more information,
      refer to Kubernetes cluster requirements
      (https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.2/tap/GUID-prerequisites.html#kubernetes-cluster-requirements-3).
    AllowedValues:
      - 1.22
    Default: 1.22
  NumberOfNodes:
    Type: Number
    Description: Minimum number of nodes to create for the TAP EKS cluster.
    MinValue: 3
    MaxValue: 450
    Default: 3
  MaxNumberOfNodes:
    Type: Number
    Description: >-
      Maximum number of available nodes for the TAP EKS cluster in auto
      scaling.
    MinValue: 6
    MaxValue: 450
    Default: 6
  NodeInstanceType:
    Type: String
    Description: Amazon EKS cluster node instance type.
    AllowedValues:
      - m5.xlarge
    ConstraintDescription: Must be a supported EC2 instance type.
    Default: m5.xlarge
  NodeVolumeSize:
    Type: Number
    Description: Amazon EBS root volume size for Amazon EKS nodes.
    MinValue: 80
    MaxValue: 16384
    Default: 80
  RemoteAccessCidr:
    Type: String
    Description: >-
      IPv4 CIDR block permitted to connect to the Windows and Linux bastion
      hosts. We recommend that you set this value to a trusted network.
    Default: 0.0.0.0/0
  QSS3BucketName:
    Type: String
    Description: >-
      Name of the S3 bucket for your copy of the Quick Start assets. Keep the
      default name unless you are customizing the template. Changing the name
      updates code references to point to a new Quick Start location. This name
      can include numbers, lowercase letters, uppercase letters, and hyphens,
      but do not start or end with a hyphen (-). For more information, refer to
      https://aws-quickstart.github.io/option1.html.
    MinLength: 3
    MaxLength: 63
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: >-
      The Quick Start bucket name can include numbers, lowercase letters,
      uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
  QSS3KeyPrefix:
    Type: String
    Description: >-
      S3 key prefix that is used to simulate a directory for your copy of the
      Quick Start assets. Keep the default prefix unless you are customizing
      the template. Changing this prefix updates code references to point to a
      new Quick Start location. This prefix can include numbers, lowercase
      letters, uppercase letters, hyphens (-), and forward slashes (/). End
      with a forward slash. For more information, refer to
      https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html and
      https://aws-quickstart.github.io/option1.html.
    AllowedPattern: ^([0-9a-zA-Z-.]+/)*$
    ConstraintDescription:
      The Quick Start S3 key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slashes (/).
    Default: quickstart-vmware-tanzu-application-platform/
  QSS3BucketRegion:
    Type: String
    Description: >-
     AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted.
     Keep the default Region unless you are customizing the template. Changing
     this Region updates code references to point to a new Quick Start
     location. When using your own bucket, specify the Region. For more
     information, refer to https://aws-quickstart.github.io/option1.html.
    Default: us-east-1
Conditions:
  3AZDeployment: !Not [!Equals [!Ref PrivateSubnet3Id, '']]
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, aws-quickstart]
Resources:
  # LinuxBastionIamRole:
    # Type: AWS::IAM::Role
    # Properties:
    #   RoleName: !Sub
    #     - VMwareLinuxBastionIamRole-${StackId}
    # REPLACE
    # Resource: !Sub arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:cluster/${EKSClusterName}
    # WITH
    # Resource: !Sub arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:cluster/*
  EKSAdvancedConfigStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-amazon-eks/templates/amazon-eks-advanced-configuration.template.yaml
        - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
          S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
      Parameters:
        ConfigSetName: !Ref AWS::StackName
        NodeVolumeSize: !Ref NodeVolumeSize
        KubernetesVersion: !Ref KubernetesVersion
  RUNEKSQSStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - EKSAdvancedConfigStack
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-amazon-eks/templates/amazon-eks-entrypoint-existing-vpc.template.yaml
        - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
          S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
      Parameters:
        ConfigSetName: !Ref AWS::StackName
        VPCID: !Ref VpcId
        PrivateSubnet1ID: !Ref PrivateSubnet1Id
        PrivateSubnet2ID: !Ref PrivateSubnet2Id
        PrivateSubnet3ID: !If
          - 3AZDeployment
          - !Ref PrivateSubnet3Id
          - !Ref AWS::NoValue
        RemoteAccessCIDR: !Ref RemoteAccessCidr
        EKSPublicAccessEndpoint: Disabled
        AdditionalEKSAdminRoleArn: arn:aws:iam::188471332253:role/VMwareLinuxBastionIamRole-73181b90-5efd-11ed-a166-126e4ccc5485
        KeyPairName: !Ref KeyPairName
        NumberOfNodes: !Ref NumberOfNodes
        MaxNumberOfNodes: !Ref MaxNumberOfNodes
        NodeInstanceType: !Ref NodeInstanceType
        NodeInstanceFamily: Standard
        NodeGroupType: Managed
        NodeGroupOS: Amazon Linux 2
        EKSClusterName: !Join ['', [!Ref EKSClusterName, "-run" ]]
        ClusterAutoScaler: Enabled
        MonitoringStack: None
        ALBIngressController: Enabled
  VIEWEKSQSStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - EKSAdvancedConfigStack
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-amazon-eks/templates/amazon-eks-entrypoint-existing-vpc.template.yaml
        - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
          S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
      Parameters:
        ConfigSetName: !Ref AWS::StackName
        VPCID: !Ref VpcId
        PrivateSubnet1ID: !Ref PrivateSubnet1Id
        PrivateSubnet2ID: !Ref PrivateSubnet2Id
        PrivateSubnet3ID: !If
          - 3AZDeployment
          - !Ref PrivateSubnet3Id
          - !Ref AWS::NoValue
        RemoteAccessCIDR: !Ref RemoteAccessCidr
        EKSPublicAccessEndpoint: Disabled
        AdditionalEKSAdminRoleArn: arn:aws:iam::188471332253:role/VMwareLinuxBastionIamRole-73181b90-5efd-11ed-a166-126e4ccc5485
        KeyPairName: !Ref KeyPairName
        NumberOfNodes: !Ref NumberOfNodes
        MaxNumberOfNodes: !Ref MaxNumberOfNodes
        NodeInstanceType: !Ref NodeInstanceType
        NodeInstanceFamily: Standard
        NodeGroupType: Managed
        NodeGroupOS: Amazon Linux 2
        EKSClusterName: !Join ['', [!Ref EKSClusterName, "-view" ]]
        ClusterAutoScaler: Enabled
        ProvisionBastionHost: Disabled
        SnykIntegration: Disabled
        NewRelicIntegration: Disabled
        CalicoIntegration: Disabled
        RafaySysIntegration: Disabled
        GrafanaIntegration: Disabled
        PrometheusIntegration: Disabled
        VaultIntegration: Disabled
        ConsulIntegration: Disabled
        RancherIntegration: Disabled
        MonitoringStack: None
        ALBIngressController: Enabled
        EfsStorageClass: Disabled
  BUILDEKSQSStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - EKSAdvancedConfigStack
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-amazon-eks/templates/amazon-eks-entrypoint-existing-vpc.template.yaml
        - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
          S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
      Parameters:
        ConfigSetName: !Ref AWS::StackName
        VPCID: !Ref VpcId
        PrivateSubnet1ID: !Ref PrivateSubnet1Id
        PrivateSubnet2ID: !Ref PrivateSubnet2Id
        PrivateSubnet3ID: !If
          - 3AZDeployment
          - !Ref PrivateSubnet3Id
          - !Ref AWS::NoValue
        RemoteAccessCIDR: !Ref RemoteAccessCidr
        EKSPublicAccessEndpoint: Disabled
        AdditionalEKSAdminRoleArn: arn:aws:iam::188471332253:role/VMwareLinuxBastionIamRole-73181b90-5efd-11ed-a166-126e4ccc5485
        KeyPairName: !Ref KeyPairName
        NumberOfNodes: !Ref NumberOfNodes
        MaxNumberOfNodes: !Ref MaxNumberOfNodes
        NodeInstanceType: !Ref NodeInstanceType
        NodeInstanceFamily: Standard
        NodeGroupType: Managed
        NodeGroupOS: Amazon Linux 2
        EKSClusterName: !Join ['', [!Ref EKSClusterName, "-build" ]]
        ClusterAutoScaler: Enabled
        ProvisionBastionHost: Disabled
        SnykIntegration: Disabled
        NewRelicIntegration: Disabled
        CalicoIntegration: Disabled
        RafaySysIntegration: Disabled
        GrafanaIntegration: Disabled
        PrometheusIntegration: Disabled
        VaultIntegration: Disabled
        ConsulIntegration: Disabled
        RancherIntegration: Disabled
        MonitoringStack: None
        ALBIngressController: Enabled
        EfsStorageClass: Disabled
  ITERATEEKSQSStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - EKSAdvancedConfigStack
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-amazon-eks/templates/amazon-eks-entrypoint-existing-vpc.template.yaml
        - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
          S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
      Parameters:
        ConfigSetName: !Ref AWS::StackName
        VPCID: !Ref VpcId
        PrivateSubnet1ID: !Ref PrivateSubnet1Id
        PrivateSubnet2ID: !Ref PrivateSubnet2Id
        PrivateSubnet3ID: !If
          - 3AZDeployment
          - !Ref PrivateSubnet3Id
          - !Ref AWS::NoValue
        RemoteAccessCIDR: !Ref RemoteAccessCidr
        EKSPublicAccessEndpoint: Disabled
        AdditionalEKSAdminRoleArn: arn:aws:iam::188471332253:role/VMwareLinuxBastionIamRole-73181b90-5efd-11ed-a166-126e4ccc5485
        KeyPairName: !Ref KeyPairName
        NumberOfNodes: !Ref NumberOfNodes
        MaxNumberOfNodes: !Ref MaxNumberOfNodes
        NodeInstanceType: !Ref NodeInstanceType
        NodeInstanceFamily: Standard
        NodeGroupType: Managed
        NodeGroupOS: Amazon Linux 2
        EKSClusterName: !Join ['', [!Ref EKSClusterName, "-iterate" ]]
        ClusterAutoScaler: Enabled
        ProvisionBastionHost: Disabled
        SnykIntegration: Disabled
        NewRelicIntegration: Disabled
        CalicoIntegration: Disabled
        RafaySysIntegration: Disabled
        GrafanaIntegration: Disabled
        PrometheusIntegration: Disabled
        VaultIntegration: Disabled
        ConsulIntegration: Disabled
        RancherIntegration: Disabled
        MonitoringStack: None
        ALBIngressController: Enabled
        EfsStorageClass: Disabled
  BUILDBuildServiceIamRole:
    Type: AWS::IAM::Role
    # Condition: UseEcr
    Properties:
      RoleName: !Sub
        - BUILDBuildServiceIamRole-${StackId}
        - StackId: !Select [2, !Split [/, !Ref AWS::StackId]]
      Description: >-
        VMware Tanzu Application Platform role to allow Tanzu Build Service
        to write to ECR.
      AssumeRolePolicyDocument: !Sub
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "${IamOidcProviderArn}/${OidcProviderEndpoint}"
                },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringEquals": {
                    "${OidcProviderEndpoint}:aud": "sts.amazonaws.com"
                  },
                  "StringLike": {
                    "${OidcProviderEndpoint}:sub": [
                      "system:serviceaccount:kpack:controller",
                      "system:serviceaccount:build-service:dependency-updater-controller-serviceaccount"
                    ]
                  }
                }
              }
            ]
          }
        - IamOidcProviderArn: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider
          OidcProviderEndpoint: !Select [1, !Split ["//", !GetAtt BUILDEKSQSStack.Outputs.OIDCIssuerURL]]
      Policies:
        - PolicyName: TAPEcrBuildService
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: TAPEcrBuildServiceGlobal
                Effect: Allow
                Action:
                  - ecr:DescribeRegistry
                  - ecr:GetAuthorizationToken
                  - ecr:GetRegistryPolicy
                  - ecr:PutRegistryPolicy
                  - ecr:PutReplicationConfiguration
                  - ecr:DeleteRegistryPolicy
                Resource: '*'
              - Sid: TAPEcrBuildServiceScoped
                Effect: Allow
                Action:
                  - ecr:DescribeImages
                  - ecr:ListImages
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:BatchGetRepositoryScanningConfiguration
                  - ecr:DescribeImageReplicationStatus
                  - ecr:DescribeImageScanFindings
                  - ecr:DescribeRepositories
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetLifecyclePolicy
                  - ecr:GetLifecyclePolicyPreview
                  - ecr:GetRegistryScanningConfiguration
                  - ecr:GetRepositoryPolicy
                  - ecr:ListTagsForResource
                  - ecr:TagResource
                  - ecr:UntagResource
                  - ecr:BatchDeleteImage
                  - ecr:BatchImportUpstreamImage
                  - ecr:CompleteLayerUpload
                  - ecr:CreatePullThroughCacheRule
                  - ecr:CreateRepository
                  - ecr:DeleteLifecyclePolicy
                  - ecr:DeletePullThroughCacheRule
                  - ecr:DeleteRepository
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:PutImageScanningConfiguration
                  - ecr:PutImageTagMutability
                  - ecr:PutLifecyclePolicy
                  - ecr:PutRegistryScanningConfiguration
                  - ecr:ReplicateImage
                  - ecr:StartImageScan
                  - ecr:StartLifecyclePolicyPreview
                  - ecr:UploadLayerPart
                  - ecr:DeleteRepositoryPolicy
                  - ecr:SetRepositoryPolicy
                Resource: '*'
  BUILDWorkloadIamRole:
    Type: AWS::IAM::Role
    # Condition: UseEcr
    Properties:
      RoleName: !Sub
        - BUILDWorkloadIamRole-${StackId}
        - StackId: !Select [2, !Split [/, !Ref AWS::StackId]]
      Description: >-
        VMware Tanzu Application Platform role to create a workload.
      AssumeRolePolicyDocument: !Sub
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "${IamOidcProviderArn}/${OidcProviderEndpoint}"
                },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringEquals": {
                    "${OidcProviderEndpoint}:aud": "sts.amazonaws.com",
                    "${OidcProviderEndpoint}:sub": "system:serviceaccount:tap-workload:default"
                  }
                }
              }
            ]
          }
        - IamOidcProviderArn: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider
          OidcProviderEndpoint: !Select [1, !Split [//, !GetAtt BUILDEKSQSStack.Outputs.OIDCIssuerURL]]
      Policies:
        - PolicyName: TAPEcrWorkload
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: TAPEcrWorkloadGlobal
                Effect: Allow
                Action:
                  - ecr:DescribeRegistry
                  - ecr:GetAuthorizationToken
                  - ecr:GetRegistryPolicy
                  - ecr:PutRegistryPolicy
                  - ecr:PutReplicationConfiguration
                  - ecr:DeleteRegistryPolicy
                Resource: '*'
              - Sid: TAPEcrWorkloadScoped
                Effect: Allow
                Action:
                  - ecr:DescribeImages
                  - ecr:ListImages
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:BatchGetRepositoryScanningConfiguration
                  - ecr:DescribeImageReplicationStatus
                  - ecr:DescribeImageScanFindings
                  - ecr:DescribeRepositories
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetLifecyclePolicy
                  - ecr:GetLifecyclePolicyPreview
                  - ecr:GetRegistryScanningConfiguration
                  - ecr:GetRepositoryPolicy
                  - ecr:ListTagsForResource
                  - ecr:TagResource
                  - ecr:UntagResource
                  - ecr:BatchDeleteImage
                  - ecr:BatchImportUpstreamImage
                  - ecr:CompleteLayerUpload
                  - ecr:CreatePullThroughCacheRule
                  - ecr:CreateRepository
                  - ecr:DeleteLifecyclePolicy
                  - ecr:DeletePullThroughCacheRule
                  - ecr:DeleteRepository
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:PutImageScanningConfiguration
                  - ecr:PutImageTagMutability
                  - ecr:PutLifecyclePolicy
                  - ecr:PutRegistryScanningConfiguration
                  - ecr:ReplicateImage
                  - ecr:StartImageScan
                  - ecr:StartLifecyclePolicyPreview
                  - ecr:UploadLayerPart
                  - ecr:DeleteRepositoryPolicy
                  - ecr:SetRepositoryPolicy
                Resource: '*'
  ITERATEBuildServiceIamRole:
    Type: AWS::IAM::Role
    # Condition: UseEcr
    Properties:
      RoleName: !Sub
        - ITERATEBuildServiceIamRole-${StackId}
        - StackId: !Select [2, !Split [/, !Ref AWS::StackId]]
      Description: >-
        VMware Tanzu Application Platform role to allow Tanzu Build Service
        to write to ECR.
      AssumeRolePolicyDocument: !Sub
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "${IamOidcProviderArn}/${OidcProviderEndpoint}"
                },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringEquals": {
                    "${OidcProviderEndpoint}:aud": "sts.amazonaws.com"
                  },
                  "StringLike": {
                    "${OidcProviderEndpoint}:sub": [
                      "system:serviceaccount:kpack:controller",
                      "system:serviceaccount:build-service:dependency-updater-controller-serviceaccount"
                    ]
                  }
                }
              }
            ]
          }
        - IamOidcProviderArn: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider
          OidcProviderEndpoint: !Select [1, !Split ["//", !GetAtt ITERATEEKSQSStack.Outputs.OIDCIssuerURL]]
      Policies:
        - PolicyName: TAPEcrBuildService
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: TAPEcrBuildServiceGlobal
                Effect: Allow
                Action:
                  - ecr:DescribeRegistry
                  - ecr:GetAuthorizationToken
                  - ecr:GetRegistryPolicy
                  - ecr:PutRegistryPolicy
                  - ecr:PutReplicationConfiguration
                  - ecr:DeleteRegistryPolicy
                Resource: '*'
              - Sid: TAPEcrBuildServiceScoped
                Effect: Allow
                Action:
                  - ecr:DescribeImages
                  - ecr:ListImages
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:BatchGetRepositoryScanningConfiguration
                  - ecr:DescribeImageReplicationStatus
                  - ecr:DescribeImageScanFindings
                  - ecr:DescribeRepositories
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetLifecyclePolicy
                  - ecr:GetLifecyclePolicyPreview
                  - ecr:GetRegistryScanningConfiguration
                  - ecr:GetRepositoryPolicy
                  - ecr:ListTagsForResource
                  - ecr:TagResource
                  - ecr:UntagResource
                  - ecr:BatchDeleteImage
                  - ecr:BatchImportUpstreamImage
                  - ecr:CompleteLayerUpload
                  - ecr:CreatePullThroughCacheRule
                  - ecr:CreateRepository
                  - ecr:DeleteLifecyclePolicy
                  - ecr:DeletePullThroughCacheRule
                  - ecr:DeleteRepository
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:PutImageScanningConfiguration
                  - ecr:PutImageTagMutability
                  - ecr:PutLifecyclePolicy
                  - ecr:PutRegistryScanningConfiguration
                  - ecr:ReplicateImage
                  - ecr:StartImageScan
                  - ecr:StartLifecyclePolicyPreview
                  - ecr:UploadLayerPart
                  - ecr:DeleteRepositoryPolicy
                  - ecr:SetRepositoryPolicy
                Resource: '*'
  ITERATEWorkloadIamRole:
    Type: AWS::IAM::Role
    # Condition: UseEcr
    Properties:
      RoleName: !Sub
        - ITERATEWorkloadIamRole-${StackId}
        - StackId: !Select [2, !Split [/, !Ref AWS::StackId]]
      Description: >-
        VMware Tanzu Application Platform role to create a workload.
      AssumeRolePolicyDocument: !Sub
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "${IamOidcProviderArn}/${OidcProviderEndpoint}"
                },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringEquals": {
                    "${OidcProviderEndpoint}:aud": "sts.amazonaws.com",
                    "${OidcProviderEndpoint}:sub": "system:serviceaccount:tap-workload:default"
                  }
                }
              }
            ]
          }
        - IamOidcProviderArn: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider
          OidcProviderEndpoint: !Select [1, !Split [//, !GetAtt ITERATEEKSQSStack.Outputs.OIDCIssuerURL]]
      Policies:
        - PolicyName: TAPEcrWorkload
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: TAPEcrWorkloadGlobal
                Effect: Allow
                Action:
                  - ecr:DescribeRegistry
                  - ecr:GetAuthorizationToken
                  - ecr:GetRegistryPolicy
                  - ecr:PutRegistryPolicy
                  - ecr:PutReplicationConfiguration
                  - ecr:DeleteRegistryPolicy
                Resource: '*'
              - Sid: TAPEcrWorkloadScoped
                Effect: Allow
                Action:
                  - ecr:DescribeImages
                  - ecr:ListImages
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:BatchGetRepositoryScanningConfiguration
                  - ecr:DescribeImageReplicationStatus
                  - ecr:DescribeImageScanFindings
                  - ecr:DescribeRepositories
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetLifecyclePolicy
                  - ecr:GetLifecyclePolicyPreview
                  - ecr:GetRegistryScanningConfiguration
                  - ecr:GetRepositoryPolicy
                  - ecr:ListTagsForResource
                  - ecr:TagResource
                  - ecr:UntagResource
                  - ecr:BatchDeleteImage
                  - ecr:BatchImportUpstreamImage
                  - ecr:CompleteLayerUpload
                  - ecr:CreatePullThroughCacheRule
                  - ecr:CreateRepository
                  - ecr:DeleteLifecyclePolicy
                  - ecr:DeletePullThroughCacheRule
                  - ecr:DeleteRepository
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:PutImageScanningConfiguration
                  - ecr:PutImageTagMutability
                  - ecr:PutLifecyclePolicy
                  - ecr:PutRegistryScanningConfiguration
                  - ecr:ReplicateImage
                  - ecr:StartImageScan
                  - ecr:StartLifecyclePolicyPreview
                  - ecr:UploadLayerPart
                  - ecr:DeleteRepositoryPolicy
                  - ecr:SetRepositoryPolicy
                Resource: '*'
  RunLinuxBastionSshToNodesEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow SSH from the Linux bastion host / bootstrap instance to the EKS
        nodes.
      GroupId: !Ref LinuxBastionSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !GetAtt RUNEKSQSStack.Outputs.NodeGroupSecurityGroup
  RunNodesSshIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow SSH from the Linux bastion host / bootstrap instance to the EKS
        nodes.
      GroupId: !GetAtt RUNEKSQSStack.Outputs.NodeGroupSecurityGroup
      IpProtocol: tcp
      ToPort: 22
      FromPort: 22
      SourceSecurityGroupId: !Ref LinuxBastionSecurityGroup
  RunLinuxBastionK8sToApiEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow the Linux bastion host / bootstrap instance to connect to the EKS
        control plane for Kubernetes API traffic.
      GroupId: !Ref LinuxBastionSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !GetAtt RUNEKSQSStack.Outputs.ControlPlaneSecurityGroup
  RunEKSControlPlaneApiIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow the Linux bastion host / bootstrap instance to connect to the EKS
        control plane for Kubernetes API traffic.
      GroupId: !GetAtt RUNEKSQSStack.Outputs.ControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      SourceSecurityGroupId: !Ref LinuxBastionSecurityGroup
  RunEKSViewClusterApiIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow the View Cluster to connect to the EKS
        control plane for Kubernetes API traffic.
      GroupId: !GetAtt RUNEKSQSStack.Outputs.ControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      SourceSecurityGroupId: !Ref VIEWEKSQSStack.Outputs.ControlPlaneSecurityGroup
  ViewLinuxBastionSshToNodesEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow SSH from the Linux bastion host / bootstrap instance to the EKS
        nodes.
      GroupId: !Ref LinuxBastionSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !GetAtt VIEWEKSQSStack.Outputs.NodeGroupSecurityGroup
  ViewNodesSshIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow SSH from the Linux bastion host / bootstrap instance to the EKS
        nodes.
      GroupId: !GetAtt VIEWEKSQSStack.Outputs.NodeGroupSecurityGroup
      IpProtocol: tcp
      ToPort: 22
      FromPort: 22
      SourceSecurityGroupId: !Ref LinuxBastionSecurityGroup
  ViewLinuxBastionK8sToApiEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow the Linux bastion host / bootstrap instance to connect to the EKS
        control plane for Kubernetes API traffic.
      GroupId: !Ref LinuxBastionSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !GetAtt VIEWEKSQSStack.Outputs.ControlPlaneSecurityGroup
  ViewEKSControlPlaneApiIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow the Linux bastion host / bootstrap instance to connect to the EKS
        control plane for Kubernetes API traffic.
      GroupId: !GetAtt VIEWEKSQSStack.Outputs.ControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      SourceSecurityGroupId: !Ref LinuxBastionSecurityGroup
  BuildLinuxBastionSshToNodesEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow SSH from the Linux bastion host / bootstrap instance to the EKS
        nodes.
      GroupId: !Ref LinuxBastionSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !GetAtt BUILDEKSQSStack.Outputs.NodeGroupSecurityGroup
  BuildNodesSshIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow SSH from the Linux bastion host / bootstrap instance to the EKS
        nodes.
      GroupId: !GetAtt BUILDEKSQSStack.Outputs.NodeGroupSecurityGroup
      IpProtocol: tcp
      ToPort: 22
      FromPort: 22
      SourceSecurityGroupId: !Ref LinuxBastionSecurityGroup
  BuildinuxBastionK8sToApiEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow the Linux bastion host / bootstrap instance to connect to the EKS
        control plane for Kubernetes API traffic.
      GroupId: !Ref LinuxBastionSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !GetAtt BUILDEKSQSStack.Outputs.ControlPlaneSecurityGroup
  BuildEKSControlPlaneApiIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow the Linux bastion host / bootstrap instance to connect to the EKS
        control plane for Kubernetes API traffic.
      GroupId: !GetAtt BUILDEKSQSStack.Outputs.ControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      SourceSecurityGroupId: !Ref LinuxBastionSecurityGroup
  BuildEKSViewClusterApiIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow the View Cluster to connect to the EKS
        control plane for Kubernetes API traffic.
      GroupId: !GetAtt BUILDEKSQSStack.Outputs.ControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      SourceSecurityGroupId: !Ref VIEWEKSQSStack.Outputs.ControlPlaneSecurityGroup
  IterateLinuxBastionSshToNodesEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow SSH from the Linux bastion host / bootstrap instance to the EKS
        nodes.
      GroupId: !Ref LinuxBastionSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !GetAtt ITERATEEKSQSStack.Outputs.NodeGroupSecurityGroup
  IterateNodesSshIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow SSH from the Linux bastion host / bootstrap instance to the EKS
        nodes.
      GroupId: !GetAtt ITERATEEKSQSStack.Outputs.NodeGroupSecurityGroup
      IpProtocol: tcp
      ToPort: 22
      FromPort: 22
      SourceSecurityGroupId: !Ref LinuxBastionSecurityGroup
  IterateLinuxBastionK8sToApiEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow the Linux bastion host / bootstrap instance to connect to the EKS
        control plane for Kubernetes API traffic.
      GroupId: !Ref LinuxBastionSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !GetAtt ITERATEEKSQSStack.Outputs.ControlPlaneSecurityGroup
  IterateEKSControlPlaneApiIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Description: >-
        Allow the Linux bastion host / bootstrap instance to connect to the EKS
        control plane for Kubernetes API traffic.
      GroupId: !GetAtt ITERATEEKSQSStack.Outputs.ControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      SourceSecurityGroupId: !Ref LinuxBastionSecurityGroup
Outputs:
  ViewEKSClusterName:
    Description: The Amazon EKS cluster name.
    Value: !GetAtt VIEWEKSQSStack.Outputs.EKSClusterName
  RunEKSClusterName:
    Description: The Amazon EKS cluster name.
    Value: !GetAtt RUNEKSQSStack.Outputs.EKSClusterName
  BuildEKSClusterName:
    Description: The Amazon EKS cluster name.
    Value: !GetAtt BUILDEKSQSStack.Outputs.EKSClusterName
  IterateEKSClusterName:
    Description: The Amazon EKS cluster name.
    Value: !GetAtt ITERATEEKSQSStack.Outputs.EKSClusterName
  BUILDWorkloadIamRole:
    Description: BUILDWorkloadIamRole.
    Value: !GetAtt BUILDWorkloadIamRole.Arn
  BUILDBuildServiceIamRole:
    Description: BUILDBuildServiceIamRole.
    Value: !GetAtt BUILDBuildServiceIamRole.Arn
  ITERATEWorkloadIamRole:
    Description: ITERATEWorkloadIamRole.
    Value: !GetAtt ITERATEWorkloadIamRole.Arn
  ITERATEBuildServiceIamRole:
    Description: ITERATEBuildServiceIamRole.
    Value: !GetAtt ITERATEBuildServiceIamRole.Arn
  TAPClusterArch:
    Description: TAP ClusterArch
    Value: !Ref TAPClusterArch
  IterateLinuxBastionSshToNodesEgressRule:
    Description: IterateLinuxBastionSshToNodesEgressRule
    Value: !Ref IterateLinuxBastionSshToNodesEgressRule
  IterateNodesSshIngressRule:
    Description: IterateNodesSshIngressRule
    Value: !Ref IterateNodesSshIngressRule
  BuildLinuxBastionSshToNodesEgressRule:
    Description: BuildLinuxBastionSshToNodesEgressRule
    Value: !Ref BuildLinuxBastionSshToNodesEgressRule
  BuildNodesSshIngressRule:
    Description: BuildNodesSshIngressRule
    Value: !Ref BuildNodesSshIngressRule
  RunLinuxBastionSshToNodesEgressRule:
    Description: RunLinuxBastionSshToNodesEgressRule
    Value: !Ref RunLinuxBastionSshToNodesEgressRule
  RunNodesSshIngressRule:
    Description: RunNodesSshIngressRule
    Value: !Ref RunNodesSshIngressRule
  ViewLinuxBastionSshToNodesEgressRule:
    Description: ViewLinuxBastionSshToNodesEgressRule
    Value: !Ref ViewLinuxBastionSshToNodesEgressRule
  ViewNodesSshIngressRule:
    Description: ViewNodesSshIngressRule
    Value: !Ref ViewNodesSshIngressRule
  TAPGuiUrl:
    Description: >-
      The URL of the VMware Tanzu Application Platform GUI that is accessible
      from within the VPC, such as the Windows bastion instance.
    Value: !Sub http://tap-gui.view.${TAPDomainName}
  TAPWorkloadUrl:
    Description: >-
      The URL of the VMware Tanzu Application Platform sample workload that is
      accessible from within the VPC, such as the Windows bastion instance.
    Value: !Sub
      - http://${SampleAppName}.${Namespace}.run.${TAPDomainName}
      - Namespace: !FindInMap [SampleAppProperties, Namespace, Name]
